Metadata-Version: 2.1
Name: webdriver-helper
Version: 2.2.0
Summary: 自动下载浏览器驱动，使selenium 4.0开箱即用，并一些提高增强的功能
License: Apache-2.0
Author-email: dongfangtianyu <7629022+dongfangtianyu@users.noreply.github.com>
Requires-Python: >=3.9
Requires-Dist: Appium-Python-Client>=2.6.0
Requires-Dist: parse==1.19.0
Requires-Dist: selenium>=4.0.0
Requires-Dist: webdriver-manager==3.8.5
Project-URL: Homepage, https://github.com/dongfangtianyu/webdriver-helper
Description-Content-Type: text/markdown

# WebDriver助手

WebDriver助手（webdriver-helpler）是一个第三方库，通过增加一些额外的能力，让selenium更加好用

- 😊 自动**下载**合适的浏览器驱动（国内镜像加速）
- 😊 自动**创建**和返回WebDriver对象（本地浏览器或远程浏览器）
- 😊 可以**调试**Python和浏览器（Chromium内核）
- 😊 可以**拖拽**上传文件
- 😊 可以**修改**文件下载目录（Chromium内核）
- 😊 可以**设置**思考时间（实验性）
- 😊 内置了Base Page以便进行**POM封装**



>    本文记录了webdriver_helpler==2.2.0的使用说明，如果与实际使用版本差异较大，则可能部分内容不准确



## 环境要求

-   Python >= 3.9

-   Selenium >=4.1



## 用法

用法有2部分：

-   Driver： 对selenium的增强，提供便捷实例化webdriver的函数
-   POM：定义basepage，以便快速实现POM

### 1. Driver

基本用法

```python
driver = get_webdriver(
        "android",  # 启动类型：chrome，edge， firefox，ie, android, ios
        hub="http://127.0.0.1:4723/wd/hub",  # 选填，appium或者selenium grid地址
        capabilities={ # 选填，仅在android, ios 时有效
            "app": "D:\\Go\\automaster_release_1.3.apk",
            "noReset": True,
            "dontStopAppOnReset": True,
        },  
    )
driver.quit()
```



#### 1. 启动浏览器

```python
from webdriver_helper import get_webdriver

chrome = get_webdriver()  # 默认启动chrome， 启动时下载合适的浏览器驱动
chrome.get("https://baidu.com")
chrome.quit()

firefox = get_webdriver("fireFOX")  # 也可指定firefox，大小写不敏感
firefox.quit()
```



#### 2. 设置浏览器启动参数

>   设置浏览器参数，只需在启动时传递options即可

```python
from selenium import webdriver
from webdriver_helper import get_webdriver

option = webdriver.ChromeOptions()  # 创建Option对象
option.add_argument("--headless")  # 无头模式

chrome = get_webdriver(options=webdriver.ChromeOptions())  # 传递Option参数
chrome.quit()

firefox = get_webdriver("firefox", options=webdriver.FirefoxOptions())
firefox.quit()

```



#### 3. 启动远程浏览器

```python
from webdriver_helper import get_webdriver

driver = get_webdriver('firefox', hub="http://127.0.0.1:4444/wd/hub") 
# hub参数指定selenium grdi的地址，便可启动远程浏览器
# 启动远程浏览器时同样可以传递options参数，这里省略了

driver.get("https://baidu.com")
driver.quit()
```



#### 4. 链接Android或iOS

```python
from webdriver_helper import get_webdriver

driver = get_webdriver('android', hub="http://127.0.0.1:4723/wd/hub") 
# hub参数指定appium的地址，便可启动远程设备Android或iOS
# 启动远程设备时同样可以传递options参数，这里省略了
# 启动远程设备时传递额外的capabilities参数，这里省略了

driver.quit()
```





#### 4. 进入浏览器调试模式

>   仅支持Chromium内核，如Chrome、Edge

```python
from webdriver_helper import debugger, get_webdriver

chrome = get_webdriver()  # 默认启动chrome
chrome.get("https://baidu.com")

debugger(chrome)  # 进入调试模式，浏览器和python将被挂起
# 在控制输入`c`并按下回车 ，退出调试模式

chrome.quit()
```

#### 4. 文件拖拽上传

```python
from webdriver_helper import debugger, get_webdriver
from selenium.webdriver.common.by import By

chrome = get_webdriver()  # 默认启动chrome

chrome.get("http://118.24.147.95:8086/upload.html")

ele = chrome.find_element(By.XPATH, "/html/body/div[2]/div")  # 定位要拖放文件的元素
ele.upload_by_drop('img.jpg')  # 将文件`img.jpg`上传

```



#### 5. 设置下载目录

>   仅支持Chromium内核，如Chrome、Edge

```python
import os
import time

from webdriver_helper import get_webdriver

driver = get_webdriver()  # 启动浏览器

# 将浏览器下载目录设置为当前目录下的download，如果目录不存在会自动创建
driver.set_download_path("./download")

# 访问下载链接，自动进行下载
driver.get("https://api.tttt.one/httpbin/stream-bytes/1024")

time.sleep(3)  # 等待下载完成

assert os.path.exists("./download/1024")  # 断言文件下载成功

```



#### 6. 设置思考时间

>   实验性功能，降低自动化速度，使行为更像真人
>
>   常用于爬虫，或页面加载较慢又不想写太多等待代码的场景

```python
from webdriver_helper import get_webdriver

driver = get_webdriver() # 启动浏览器

# driver每个动作之间停顿0.5~1秒钟，可以提高页面异步成功率，降低反爬触发机率
driver.set_think_time(0.5)

```



### 2. POM

#### 1. 主要特点

1. PO实例化时**自动验证**URL和元素
2. 元素定位时**自动等待**
3. 元素交互时**自动等待**
4. 内置常用的**交互动作**：点击、输入、文件上传、下拉选择
5. 支持使用**js强制完成**常用的交互动作
6. 内置`AlertPage`实现对alert便捷操作（对alert也会**自动等待**）
7. 为PyCharm提供完美**语法提示**和**自动补全**



#### 2. 使用示例

```python
from webdriver_helper.pom import * # 导入模块


# 1. 定义Page
class LoginPage(BasePage): # 继承BasePgae 定义PO
    # 定义url 属性，可以实现页面跳转，和url校验
    url = "http://101.34.221.219:8010/?s=user/logininfo.html" 
    
    # 属性即元素，在此定义的LazyElement可以实现元素自动定位和加载校验
    ipt_username = LazyElement(By.XPATH, "//form/div[1]/input" )
    ipt_password = LazyElement(By.XPATH, "//form/div[2]/div/input")
    btn_submit = LazyElement(By.XPATH, "//form/div[3]/button")
    
    # 对于动态出现的元素，通过check_on_init=False，免去在PO实例化时的自动校验
    p_msg = LazyElement(
        By.XPATH,
        '//p[@class="prompt-msg"]',
        check_on_init=False, 
    )

    def login(self, username, password):
         # send_keys 方法进行输入，会自动等待元素处于可输入状态
        self.send_keys(self.ipt_username, username)
        self.send_keys(self.ipt_password, password)
        
         # click 方法进行点击，会自动等待元素处于可点击状态
        self.click(self.btn_submit)

        return self.p_msg.text # 使用另一个元素时，同样直接访问属性即可


# 2. 使用PO
def test_login(driver):
    # 跳转到登陆页面并实例化PO，自动检查URL、元素是否正确
    page = LoginPage.start(driver)  
    
    # 调用PO方法，完成自动化操作
    msg = page.logon("admin", "123456") 
    
    assert  msg == '密码错误'  # 断言po返回值
```



#### 3. PyCharm自动补全

-   访问PO方法时，自动补全

   ![访问PO方法时，自动补全](images/image-20220720143639253.png)

-   访问PO元素时，自动补全


   ![访问PO元素时，自动补全](images/image-20220720143655135.png)



## 联系作者

如果在使用过程中遇到什么问题，欢迎通过以下方式联系：

-   email：**dongfangtianyu@gmail.com**

-   vx:  **python_sanmu** 

